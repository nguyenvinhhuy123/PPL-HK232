# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,51,446,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
        25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,5,43,309,8,43,10,
        43,12,43,312,9,43,1,44,4,44,315,8,44,11,44,12,44,316,1,44,1,44,1,
        45,1,45,1,46,1,46,1,47,1,47,3,47,327,8,47,1,48,1,48,5,48,331,8,48,
        10,48,12,48,334,9,48,1,49,1,49,5,49,338,8,49,10,49,12,49,341,9,49,
        1,49,3,49,344,8,49,1,50,1,50,3,50,348,8,50,1,50,1,50,5,50,352,8,
        50,10,50,12,50,355,9,50,1,50,3,50,358,8,50,1,51,1,51,1,51,1,51,1,
        51,3,51,365,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,
        55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,3,
        59,389,8,59,1,60,1,60,5,60,393,8,60,10,60,12,60,396,9,60,1,60,1,
        60,1,60,1,61,1,61,1,61,1,62,1,62,5,62,406,8,62,10,62,12,62,409,9,
        62,1,62,1,62,1,63,4,63,414,8,63,11,63,12,63,415,1,63,1,63,1,64,1,
        64,1,65,1,65,1,66,1,66,1,66,1,67,1,67,5,67,429,8,67,10,67,12,67,
        432,9,67,1,67,1,67,1,67,1,68,1,68,5,68,439,8,68,10,68,12,68,442,
        9,68,1,68,1,68,1,68,0,0,69,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,0,87,0,89,43,91,0,93,0,95,0,97,0,99,0,101,0,103,44,105,0,107,
        0,109,0,111,0,113,0,115,0,117,0,119,0,121,45,123,0,125,46,127,47,
        129,48,131,0,133,49,135,50,137,51,1,0,12,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,49,57,2,0,69,69,101,101,2,0,43,
        43,45,45,5,0,8,10,12,13,34,34,39,39,92,92,1,0,92,92,7,0,8,8,34,34,
        39,39,102,102,110,110,114,114,116,116,1,0,39,39,1,0,34,34,3,0,8,
        9,12,13,32,32,1,0,10,10,444,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,89,1,0,0,0,0,
        103,1,0,0,0,0,121,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,3,144,
        1,0,0,0,5,149,1,0,0,0,7,155,1,0,0,0,9,162,1,0,0,0,11,167,1,0,0,0,
        13,174,1,0,0,0,15,181,1,0,0,0,17,185,1,0,0,0,19,193,1,0,0,0,21,198,
        1,0,0,0,23,202,1,0,0,0,25,208,1,0,0,0,27,211,1,0,0,0,29,217,1,0,
        0,0,31,226,1,0,0,0,33,229,1,0,0,0,35,234,1,0,0,0,37,239,1,0,0,0,
        39,245,1,0,0,0,41,249,1,0,0,0,43,251,1,0,0,0,45,253,1,0,0,0,47,255,
        1,0,0,0,49,257,1,0,0,0,51,259,1,0,0,0,53,263,1,0,0,0,55,267,1,0,
        0,0,57,270,1,0,0,0,59,272,1,0,0,0,61,275,1,0,0,0,63,278,1,0,0,0,
        65,280,1,0,0,0,67,282,1,0,0,0,69,285,1,0,0,0,71,288,1,0,0,0,73,291,
        1,0,0,0,75,295,1,0,0,0,77,297,1,0,0,0,79,299,1,0,0,0,81,301,1,0,
        0,0,83,303,1,0,0,0,85,305,1,0,0,0,87,310,1,0,0,0,89,314,1,0,0,0,
        91,320,1,0,0,0,93,322,1,0,0,0,95,326,1,0,0,0,97,328,1,0,0,0,99,343,
        1,0,0,0,101,357,1,0,0,0,103,364,1,0,0,0,105,366,1,0,0,0,107,368,
        1,0,0,0,109,371,1,0,0,0,111,375,1,0,0,0,113,377,1,0,0,0,115,379,
        1,0,0,0,117,382,1,0,0,0,119,388,1,0,0,0,121,390,1,0,0,0,123,400,
        1,0,0,0,125,403,1,0,0,0,127,413,1,0,0,0,129,419,1,0,0,0,131,421,
        1,0,0,0,133,423,1,0,0,0,135,426,1,0,0,0,137,436,1,0,0,0,139,140,
        5,109,0,0,140,141,5,97,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,
        2,1,0,0,0,144,145,5,116,0,0,145,146,5,114,0,0,146,147,5,117,0,0,
        147,148,5,101,0,0,148,4,1,0,0,0,149,150,5,102,0,0,150,151,5,97,0,
        0,151,152,5,108,0,0,152,153,5,115,0,0,153,154,5,101,0,0,154,6,1,
        0,0,0,155,156,5,110,0,0,156,157,5,117,0,0,157,158,5,109,0,0,158,
        159,5,98,0,0,159,160,5,101,0,0,160,161,5,114,0,0,161,8,1,0,0,0,162,
        163,5,98,0,0,163,164,5,111,0,0,164,165,5,111,0,0,165,166,5,108,0,
        0,166,10,1,0,0,0,167,168,5,115,0,0,168,169,5,116,0,0,169,170,5,114,
        0,0,170,171,5,105,0,0,171,172,5,110,0,0,172,173,5,103,0,0,173,12,
        1,0,0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,116,0,0,177,
        178,5,117,0,0,178,179,5,114,0,0,179,180,5,110,0,0,180,14,1,0,0,0,
        181,182,5,118,0,0,182,183,5,97,0,0,183,184,5,114,0,0,184,16,1,0,
        0,0,185,186,5,100,0,0,186,187,5,121,0,0,187,188,5,110,0,0,188,189,
        5,97,0,0,189,190,5,109,0,0,190,191,5,105,0,0,191,192,5,99,0,0,192,
        18,1,0,0,0,193,194,5,102,0,0,194,195,5,117,0,0,195,196,5,110,0,0,
        196,197,5,99,0,0,197,20,1,0,0,0,198,199,5,102,0,0,199,200,5,111,
        0,0,200,201,5,114,0,0,201,22,1,0,0,0,202,203,5,117,0,0,203,204,5,
        110,0,0,204,205,5,116,0,0,205,206,5,105,0,0,206,207,5,108,0,0,207,
        24,1,0,0,0,208,209,5,98,0,0,209,210,5,121,0,0,210,26,1,0,0,0,211,
        212,5,98,0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,215,5,97,0,
        0,215,216,5,107,0,0,216,28,1,0,0,0,217,218,5,99,0,0,218,219,5,111,
        0,0,219,220,5,110,0,0,220,221,5,116,0,0,221,222,5,105,0,0,222,223,
        5,110,0,0,223,224,5,117,0,0,224,225,5,101,0,0,225,30,1,0,0,0,226,
        227,5,105,0,0,227,228,5,102,0,0,228,32,1,0,0,0,229,230,5,101,0,0,
        230,231,5,108,0,0,231,232,5,115,0,0,232,233,5,101,0,0,233,34,1,0,
        0,0,234,235,5,101,0,0,235,236,5,108,0,0,236,237,5,105,0,0,237,238,
        5,102,0,0,238,36,1,0,0,0,239,240,5,98,0,0,240,241,5,101,0,0,241,
        242,5,103,0,0,242,243,5,105,0,0,243,244,5,110,0,0,244,38,1,0,0,0,
        245,246,5,101,0,0,246,247,5,110,0,0,247,248,5,100,0,0,248,40,1,0,
        0,0,249,250,5,43,0,0,250,42,1,0,0,0,251,252,5,45,0,0,252,44,1,0,
        0,0,253,254,5,42,0,0,254,46,1,0,0,0,255,256,5,47,0,0,256,48,1,0,
        0,0,257,258,5,37,0,0,258,50,1,0,0,0,259,260,5,110,0,0,260,261,5,
        111,0,0,261,262,5,116,0,0,262,52,1,0,0,0,263,264,5,97,0,0,264,265,
        5,110,0,0,265,266,5,100,0,0,266,54,1,0,0,0,267,268,5,111,0,0,268,
        269,5,114,0,0,269,56,1,0,0,0,270,271,5,61,0,0,271,58,1,0,0,0,272,
        273,5,60,0,0,273,274,5,45,0,0,274,60,1,0,0,0,275,276,5,33,0,0,276,
        277,5,61,0,0,277,62,1,0,0,0,278,279,5,60,0,0,279,64,1,0,0,0,280,
        281,5,62,0,0,281,66,1,0,0,0,282,283,5,60,0,0,283,284,5,61,0,0,284,
        68,1,0,0,0,285,286,5,62,0,0,286,287,5,61,0,0,287,70,1,0,0,0,288,
        289,5,61,0,0,289,290,5,61,0,0,290,72,1,0,0,0,291,292,5,46,0,0,292,
        293,5,46,0,0,293,294,5,46,0,0,294,74,1,0,0,0,295,296,5,40,0,0,296,
        76,1,0,0,0,297,298,5,41,0,0,298,78,1,0,0,0,299,300,5,91,0,0,300,
        80,1,0,0,0,301,302,5,93,0,0,302,82,1,0,0,0,303,304,5,44,0,0,304,
        84,1,0,0,0,305,306,7,0,0,0,306,86,1,0,0,0,307,309,7,1,0,0,308,307,
        1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,88,1,
        0,0,0,312,310,1,0,0,0,313,315,3,85,42,0,314,313,1,0,0,0,315,316,
        1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,
        3,87,43,0,319,90,1,0,0,0,320,321,5,48,0,0,321,92,1,0,0,0,322,323,
        7,2,0,0,323,94,1,0,0,0,324,327,3,91,45,0,325,327,3,93,46,0,326,324,
        1,0,0,0,326,325,1,0,0,0,327,96,1,0,0,0,328,332,3,93,46,0,329,331,
        3,95,47,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,
        1,0,0,0,333,98,1,0,0,0,334,332,1,0,0,0,335,339,5,46,0,0,336,338,
        3,95,47,0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,
        1,0,0,0,340,344,1,0,0,0,341,339,1,0,0,0,342,344,1,0,0,0,343,335,
        1,0,0,0,343,342,1,0,0,0,344,100,1,0,0,0,345,347,7,3,0,0,346,348,
        7,4,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,353,
        3,93,46,0,350,352,3,95,47,0,351,350,1,0,0,0,352,355,1,0,0,0,353,
        351,1,0,0,0,353,354,1,0,0,0,354,358,1,0,0,0,355,353,1,0,0,0,356,
        358,1,0,0,0,357,345,1,0,0,0,357,356,1,0,0,0,358,102,1,0,0,0,359,
        360,3,97,48,0,360,361,3,99,49,0,361,362,3,101,50,0,362,365,1,0,0,
        0,363,365,3,91,45,0,364,359,1,0,0,0,364,363,1,0,0,0,365,104,1,0,
        0,0,366,367,8,5,0,0,367,106,1,0,0,0,368,369,9,0,0,0,369,370,7,6,
        0,0,370,108,1,0,0,0,371,372,9,0,0,0,372,373,3,107,53,0,373,374,3,
        111,55,0,374,110,1,0,0,0,375,376,7,7,0,0,376,112,1,0,0,0,377,378,
        8,7,0,0,378,114,1,0,0,0,379,380,3,107,53,0,380,381,3,113,56,0,381,
        116,1,0,0,0,382,383,7,8,0,0,383,384,7,9,0,0,384,118,1,0,0,0,385,
        389,3,109,54,0,386,389,3,117,58,0,387,389,3,105,52,0,388,385,1,0,
        0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,120,1,0,0,0,390,394,7,9,
        0,0,391,393,3,119,59,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,
        0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,398,7,
        9,0,0,398,399,6,60,0,0,399,122,1,0,0,0,400,401,5,35,0,0,401,402,
        5,35,0,0,402,124,1,0,0,0,403,407,3,123,61,0,404,406,3,131,65,0,405,
        404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        410,1,0,0,0,409,407,1,0,0,0,410,411,6,62,1,0,411,126,1,0,0,0,412,
        414,7,10,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,
        416,1,0,0,0,416,417,1,0,0,0,417,418,6,63,1,0,418,128,1,0,0,0,419,
        420,5,10,0,0,420,130,1,0,0,0,421,422,8,11,0,0,422,132,1,0,0,0,423,
        424,9,0,0,0,424,425,6,66,2,0,425,134,1,0,0,0,426,430,7,9,0,0,427,
        429,3,119,59,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,
        431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,5,0,0,1,434,
        435,6,67,3,0,435,136,1,0,0,0,436,440,7,9,0,0,437,439,3,119,59,0,
        438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,
        441,443,1,0,0,0,442,440,1,0,0,0,443,444,3,115,57,0,444,445,6,68,
        4,0,445,138,1,0,0,0,17,0,310,316,326,332,339,343,347,353,357,364,
        388,394,407,415,430,440,5,1,60,0,6,0,0,1,66,1,1,67,2,1,68,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MAIN_TOKEN = 1
    KW_TRUE = 2
    KW_FALSE = 3
    KW_NUMBER = 4
    KW_BOOL = 5
    KW_STRING = 6
    KW_RETURN = 7
    KW_VAR = 8
    KW_DYNAMIC = 9
    KW_FUNC = 10
    KW_FOR = 11
    KW_UNTIL = 12
    KW_BY = 13
    KW_BREAK = 14
    KW_CONTINUE = 15
    KW_IF = 16
    KW_ELSE = 17
    KW_ELIF = 18
    KW_BEGIN = 19
    KW_END = 20
    OP_ADD = 21
    OP_SUBTRACT = 22
    OP_MULTI = 23
    OP_DIVIDE = 24
    OP_REMAINDER = 25
    OP_NOT = 26
    OP_AND = 27
    OP_OR = 28
    OP_EQUAL = 29
    OP_ASSIGN = 30
    OP_NOT_EQUAL = 31
    OP_SMALLER = 32
    OP_GREATER = 33
    OP_SMALLER_EQUAL = 34
    OP_GREATER_EQUAL = 35
    OP_STRING_EQUAL = 36
    OP_STRING_CONCAT = 37
    SEP_OPEN_PAREN = 38
    SEP_CLOSE_PAREN = 39
    SEP_OPEN_BRACK = 40
    SEP_CLOSE_BRACK = 41
    SEP_COMA = 42
    IDENTIFIER = 43
    NUMBER = 44
    STRING = 45
    COMMENT = 46
    WS = 47
    NEW_LINE = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'true'", "'false'", "'number'", "'bool'", "'string'", 
            "'return'", "'var'", "'dynamic'", "'func'", "'for'", "'until'", 
            "'by'", "'break'", "'continue'", "'if'", "'else'", "'elif'", 
            "'begin'", "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", 
            "'and'", "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'...'", "'('", "')'", "'['", "']'", "','", 
            "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", 
            "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", 
            "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", 
            "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", "OP_SUBTRACT", 
            "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", "OP_NOT", "OP_AND", 
            "OP_OR", "OP_EQUAL", "OP_ASSIGN", "OP_NOT_EQUAL", "OP_SMALLER", 
            "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", "OP_STRING_EQUAL", 
            "OP_STRING_CONCAT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
            "SEP_CLOSE_BRACK", "SEP_COMA", "IDENTIFIER", "NUMBER", "STRING", 
            "COMMENT", "WS", "NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", 
                  "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", 
                  "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", 
                  "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", 
                  "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", 
                  "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", "OP_ASSIGN", 
                  "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", 
                  "OP_GREATER_EQUAL", "OP_STRING_EQUAL", "OP_STRING_CONCAT", 
                  "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
                  "SEP_CLOSE_BRACK", "SEP_COMA", "IDENTIFIER_HEAD", "IDENTIFIER_TAIL", 
                  "IDENTIFIER", "ZERO", "NON_ZERO_DIGIT", "DIGIT", "DECIMAL", 
                  "FLOATING_POINT", "EXPONENTIAL", "NUMBER", "STRING_CHAR", 
                  "ESCAPE_SIGN", "ESCAPE_SEQUENCE", "ESCAPE_REP", "NOT_ESCAPE_REP", 
                  "ILLEGAL_ESCAPW_SEQ", "DOUBLE_QUOTE_IN_STRING", "STRING_LITTERAL", 
                  "STRING", "COMMENT_HEAD", "COMMENT", "WS", "NEW_LINE", 
                  "NOT_NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[60] = self.STRING_action 
            actions[66] = self.ERROR_CHAR_action 
            actions[67] = self.UNCLOSE_STRING_action 
            actions[68] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise IllegalEscape(self.text[1:])
     


