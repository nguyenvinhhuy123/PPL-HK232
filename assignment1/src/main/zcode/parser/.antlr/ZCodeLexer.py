# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/Assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,52,421,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,1,
        4,1,133,8,1,11,1,12,1,134,1,1,5,1,138,8,1,10,1,12,1,141,9,1,1,2,
        1,2,1,3,1,3,1,4,1,4,3,4,149,8,4,1,5,1,5,5,5,153,8,5,10,5,12,5,156,
        9,5,1,6,1,6,5,6,160,8,6,10,6,12,6,163,9,6,1,6,1,6,5,6,167,8,6,10,
        6,12,6,170,9,6,1,7,1,7,5,7,174,8,7,10,7,12,7,177,9,7,1,7,5,7,180,
        8,7,10,7,12,7,183,9,7,1,7,5,7,186,8,7,10,7,12,7,189,9,7,1,7,3,7,
        192,8,7,1,8,1,8,3,8,196,8,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,210,8,11,1,12,1,12,1,12,1,13,1,13,1,13,
        3,13,218,8,13,1,14,1,14,5,14,222,8,14,10,14,12,14,225,9,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,
        1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,
        1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,5,57,395,
        8,57,10,57,12,57,398,9,57,1,57,1,57,3,57,402,8,57,1,58,4,58,405,
        8,58,11,58,12,58,406,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,
        1,62,1,62,1,63,1,63,0,0,64,1,0,3,1,5,0,7,0,9,0,11,0,13,0,15,2,17,
        3,19,0,21,0,23,0,25,0,27,0,29,4,31,5,33,6,35,7,37,8,39,9,41,10,43,
        11,45,12,47,13,49,14,51,15,53,16,55,17,57,18,59,19,61,20,63,21,65,
        22,67,23,69,24,71,25,73,26,75,27,77,28,79,29,81,30,83,31,85,32,87,
        33,89,34,91,35,93,36,95,37,97,38,99,39,101,40,103,41,105,42,107,
        43,109,44,111,45,113,0,115,46,117,47,119,48,121,49,123,50,125,51,
        127,52,1,0,9,3,0,65,90,95,95,97,122,3,0,48,57,65,90,97,122,1,0,49,
        57,2,0,69,69,101,101,2,0,43,43,45,45,5,0,8,10,12,13,34,34,39,39,
        92,92,1,0,34,34,3,0,8,9,12,13,32,32,1,0,10,10,426,0,3,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,115,1,
        0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
        125,1,0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,132,1,0,0,0,5,142,1,0,
        0,0,7,144,1,0,0,0,9,148,1,0,0,0,11,150,1,0,0,0,13,157,1,0,0,0,15,
        191,1,0,0,0,17,195,1,0,0,0,19,197,1,0,0,0,21,199,1,0,0,0,23,209,
        1,0,0,0,25,211,1,0,0,0,27,217,1,0,0,0,29,219,1,0,0,0,31,228,1,0,
        0,0,33,233,1,0,0,0,35,239,1,0,0,0,37,246,1,0,0,0,39,251,1,0,0,0,
        41,258,1,0,0,0,43,265,1,0,0,0,45,269,1,0,0,0,47,277,1,0,0,0,49,282,
        1,0,0,0,51,286,1,0,0,0,53,292,1,0,0,0,55,295,1,0,0,0,57,301,1,0,
        0,0,59,310,1,0,0,0,61,313,1,0,0,0,63,318,1,0,0,0,65,323,1,0,0,0,
        67,329,1,0,0,0,69,333,1,0,0,0,71,335,1,0,0,0,73,337,1,0,0,0,75,339,
        1,0,0,0,77,341,1,0,0,0,79,343,1,0,0,0,81,347,1,0,0,0,83,351,1,0,
        0,0,85,354,1,0,0,0,87,356,1,0,0,0,89,359,1,0,0,0,91,362,1,0,0,0,
        93,364,1,0,0,0,95,366,1,0,0,0,97,369,1,0,0,0,99,372,1,0,0,0,101,
        375,1,0,0,0,103,379,1,0,0,0,105,381,1,0,0,0,107,383,1,0,0,0,109,
        385,1,0,0,0,111,387,1,0,0,0,113,389,1,0,0,0,115,392,1,0,0,0,117,
        404,1,0,0,0,119,410,1,0,0,0,121,412,1,0,0,0,123,414,1,0,0,0,125,
        417,1,0,0,0,127,419,1,0,0,0,129,130,7,0,0,0,130,2,1,0,0,0,131,133,
        3,1,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,
        1,0,0,0,135,139,1,0,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,141,
        1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,4,1,0,0,0,141,139,1,
        0,0,0,142,143,5,48,0,0,143,6,1,0,0,0,144,145,7,2,0,0,145,8,1,0,0,
        0,146,149,3,5,2,0,147,149,3,7,3,0,148,146,1,0,0,0,148,147,1,0,0,
        0,149,10,1,0,0,0,150,154,5,46,0,0,151,153,3,9,4,0,152,151,1,0,0,
        0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,12,1,0,0,0,
        156,154,1,0,0,0,157,161,7,3,0,0,158,160,7,4,0,0,159,158,1,0,0,0,
        160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,
        163,161,1,0,0,0,164,168,3,7,3,0,165,167,3,9,4,0,166,165,1,0,0,0,
        167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,14,1,0,0,0,170,
        168,1,0,0,0,171,175,3,7,3,0,172,174,3,9,4,0,173,172,1,0,0,0,174,
        177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,181,1,0,0,0,177,
        175,1,0,0,0,178,180,3,11,5,0,179,178,1,0,0,0,180,183,1,0,0,0,181,
        179,1,0,0,0,181,182,1,0,0,0,182,187,1,0,0,0,183,181,1,0,0,0,184,
        186,3,13,6,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,
        188,1,0,0,0,188,192,1,0,0,0,189,187,1,0,0,0,190,192,3,5,2,0,191,
        171,1,0,0,0,191,190,1,0,0,0,192,16,1,0,0,0,193,196,3,31,15,0,194,
        196,3,33,16,0,195,193,1,0,0,0,195,194,1,0,0,0,196,18,1,0,0,0,197,
        198,8,5,0,0,198,20,1,0,0,0,199,200,9,0,0,0,200,201,5,92,0,0,201,
        22,1,0,0,0,202,203,9,0,0,0,203,204,3,21,10,0,204,205,8,6,0,0,205,
        210,1,0,0,0,206,207,3,21,10,0,207,208,3,119,59,0,208,210,1,0,0,0,
        209,202,1,0,0,0,209,206,1,0,0,0,210,24,1,0,0,0,211,212,5,39,0,0,
        212,213,5,34,0,0,213,26,1,0,0,0,214,218,3,23,11,0,215,218,3,25,12,
        0,216,218,3,19,9,0,217,214,1,0,0,0,217,215,1,0,0,0,217,216,1,0,0,
        0,218,28,1,0,0,0,219,223,5,34,0,0,220,222,3,27,13,0,221,220,1,0,
        0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,
        0,0,225,223,1,0,0,0,226,227,5,34,0,0,227,30,1,0,0,0,228,229,5,116,
        0,0,229,230,5,114,0,0,230,231,5,117,0,0,231,232,5,101,0,0,232,32,
        1,0,0,0,233,234,5,102,0,0,234,235,5,97,0,0,235,236,5,108,0,0,236,
        237,5,115,0,0,237,238,5,101,0,0,238,34,1,0,0,0,239,240,5,110,0,0,
        240,241,5,117,0,0,241,242,5,109,0,0,242,243,5,98,0,0,243,244,5,101,
        0,0,244,245,5,114,0,0,245,36,1,0,0,0,246,247,5,98,0,0,247,248,5,
        111,0,0,248,249,5,111,0,0,249,250,5,108,0,0,250,38,1,0,0,0,251,252,
        5,115,0,0,252,253,5,116,0,0,253,254,5,114,0,0,254,255,5,105,0,0,
        255,256,5,110,0,0,256,257,5,103,0,0,257,40,1,0,0,0,258,259,5,114,
        0,0,259,260,5,101,0,0,260,261,5,116,0,0,261,262,5,117,0,0,262,263,
        5,114,0,0,263,264,5,110,0,0,264,42,1,0,0,0,265,266,5,118,0,0,266,
        267,5,97,0,0,267,268,5,114,0,0,268,44,1,0,0,0,269,270,5,100,0,0,
        270,271,5,121,0,0,271,272,5,110,0,0,272,273,5,97,0,0,273,274,5,109,
        0,0,274,275,5,105,0,0,275,276,5,99,0,0,276,46,1,0,0,0,277,278,5,
        102,0,0,278,279,5,117,0,0,279,280,5,110,0,0,280,281,5,99,0,0,281,
        48,1,0,0,0,282,283,5,102,0,0,283,284,5,111,0,0,284,285,5,114,0,0,
        285,50,1,0,0,0,286,287,5,117,0,0,287,288,5,110,0,0,288,289,5,116,
        0,0,289,290,5,105,0,0,290,291,5,108,0,0,291,52,1,0,0,0,292,293,5,
        98,0,0,293,294,5,121,0,0,294,54,1,0,0,0,295,296,5,98,0,0,296,297,
        5,114,0,0,297,298,5,101,0,0,298,299,5,97,0,0,299,300,5,107,0,0,300,
        56,1,0,0,0,301,302,5,99,0,0,302,303,5,111,0,0,303,304,5,110,0,0,
        304,305,5,116,0,0,305,306,5,105,0,0,306,307,5,110,0,0,307,308,5,
        117,0,0,308,309,5,101,0,0,309,58,1,0,0,0,310,311,5,105,0,0,311,312,
        5,102,0,0,312,60,1,0,0,0,313,314,5,101,0,0,314,315,5,108,0,0,315,
        316,5,115,0,0,316,317,5,101,0,0,317,62,1,0,0,0,318,319,5,101,0,0,
        319,320,5,108,0,0,320,321,5,105,0,0,321,322,5,102,0,0,322,64,1,0,
        0,0,323,324,5,98,0,0,324,325,5,101,0,0,325,326,5,103,0,0,326,327,
        5,105,0,0,327,328,5,110,0,0,328,66,1,0,0,0,329,330,5,101,0,0,330,
        331,5,110,0,0,331,332,5,100,0,0,332,68,1,0,0,0,333,334,5,43,0,0,
        334,70,1,0,0,0,335,336,5,45,0,0,336,72,1,0,0,0,337,338,5,42,0,0,
        338,74,1,0,0,0,339,340,5,47,0,0,340,76,1,0,0,0,341,342,5,37,0,0,
        342,78,1,0,0,0,343,344,5,110,0,0,344,345,5,111,0,0,345,346,5,116,
        0,0,346,80,1,0,0,0,347,348,5,97,0,0,348,349,5,110,0,0,349,350,5,
        100,0,0,350,82,1,0,0,0,351,352,5,111,0,0,352,353,5,114,0,0,353,84,
        1,0,0,0,354,355,5,61,0,0,355,86,1,0,0,0,356,357,5,60,0,0,357,358,
        5,45,0,0,358,88,1,0,0,0,359,360,5,33,0,0,360,361,5,61,0,0,361,90,
        1,0,0,0,362,363,5,60,0,0,363,92,1,0,0,0,364,365,5,62,0,0,365,94,
        1,0,0,0,366,367,5,60,0,0,367,368,5,61,0,0,368,96,1,0,0,0,369,370,
        5,62,0,0,370,371,5,61,0,0,371,98,1,0,0,0,372,373,5,61,0,0,373,374,
        5,61,0,0,374,100,1,0,0,0,375,376,5,46,0,0,376,377,5,46,0,0,377,378,
        5,46,0,0,378,102,1,0,0,0,379,380,5,40,0,0,380,104,1,0,0,0,381,382,
        5,41,0,0,382,106,1,0,0,0,383,384,5,91,0,0,384,108,1,0,0,0,385,386,
        5,93,0,0,386,110,1,0,0,0,387,388,5,44,0,0,388,112,1,0,0,0,389,390,
        5,35,0,0,390,391,5,35,0,0,391,114,1,0,0,0,392,396,3,113,56,0,393,
        395,3,121,60,0,394,393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,
        397,1,0,0,0,397,401,1,0,0,0,398,396,1,0,0,0,399,402,3,119,59,0,400,
        402,5,0,0,1,401,399,1,0,0,0,401,400,1,0,0,0,402,116,1,0,0,0,403,
        405,7,7,0,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,
        407,1,0,0,0,407,408,1,0,0,0,408,409,6,58,0,0,409,118,1,0,0,0,410,
        411,5,10,0,0,411,120,1,0,0,0,412,413,8,8,0,0,413,122,1,0,0,0,414,
        415,9,0,0,0,415,416,6,61,1,0,416,124,1,0,0,0,417,418,9,0,0,0,418,
        126,1,0,0,0,419,420,9,0,0,0,420,128,1,0,0,0,18,0,134,139,148,154,
        161,168,175,181,187,191,195,209,217,223,396,401,406,2,6,0,0,1,61,
        0
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IDENTIFIER = 1
    NUMBER = 2
    BOOLEN = 3
    STRING = 4
    KW_TRUE = 5
    KW_FALSE = 6
    KW_NUMBER = 7
    KW_BOOL = 8
    KW_STRING = 9
    KW_RETURN = 10
    KW_VAR = 11
    KW_DYNAMIC = 12
    KW_FUNC = 13
    KW_FOR = 14
    KW_UNTIL = 15
    KW_BY = 16
    KW_BREAK = 17
    KW_CONTINUE = 18
    KW_IF = 19
    KW_ELSE = 20
    KW_ELIF = 21
    KW_BEGIN = 22
    KW_END = 23
    OP_ADD = 24
    OP_SUBTRACT = 25
    OP_MULTI = 26
    OP_DIVIDE = 27
    OP_REMAINDER = 28
    OP_NOT = 29
    OP_AND = 30
    OP_OR = 31
    OP_EQUAL = 32
    OP_LEFT_ARROW = 33
    OP_NOT_EQUAL = 34
    OP_SMALLER = 35
    OP_GREATER = 36
    OP_SMALLER_EQUAL = 37
    OP_GREATER_EQUAL = 38
    OP_EQUAL_COMPARE = 39
    OP_TRIPLE_DOT = 40
    SEP_OPEN_PAREN = 41
    SEP_CLOSE_PAREN = 42
    SEP_OPEN_BRACK = 43
    SEP_CLOSE_BRACK = 44
    SEP_COMA = 45
    COMMENT = 46
    WS = 47
    NEW_LINE = 48
    NOT_NEW_LINE = 49
    ERROR_CHAR = 50
    UNCLOSE_STRING = 51
    ILLEGAL_ESCAPE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", 
            "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'=='", "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "NUMBER", "BOOLEN", "STRING", "KW_TRUE", "KW_FALSE", 
            "KW_NUMBER", "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", 
            "KW_DYNAMIC", "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
            "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", 
            "OP_ADD", "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", 
            "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", "OP_LEFT_ARROW", "OP_NOT_EQUAL", 
            "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", 
            "OP_EQUAL_COMPARE", "OP_TRIPLE_DOT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", 
            "SEP_OPEN_BRACK", "SEP_CLOSE_BRACK", "SEP_COMA", "COMMENT", 
            "WS", "NEW_LINE", "NOT_NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IDENTIFIER_HEAD", "IDENTIFIER", "ZERO", "NON_ZERO_DIGIT", 
                  "DIGIT", "FLOATING_POINT", "EXPONENTIAL", "NUMBER", "BOOLEN", 
                  "STRING_CHAR", "ESCAPE_SIGN", "ESCAPE_SEQUENCE", "DOUBLE_QUOTE_IN_STRING", 
                  "STRING_LITTERAL", "STRING", "KW_TRUE", "KW_FALSE", "KW_NUMBER", 
                  "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", 
                  "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
                  "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", 
                  "KW_END", "OP_ADD", "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", 
                  "OP_REMAINDER", "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", 
                  "OP_LEFT_ARROW", "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", 
                  "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", "OP_EQUAL_COMPARE", 
                  "OP_TRIPLE_DOT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", 
                  "SEP_OPEN_BRACK", "SEP_CLOSE_BRACK", "SEP_COMA", "COMMENT_HEAD", 
                  "COMMENT", "WS", "NEW_LINE", "NOT_NEW_LINE", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise ErrorToken(self.text)
     


