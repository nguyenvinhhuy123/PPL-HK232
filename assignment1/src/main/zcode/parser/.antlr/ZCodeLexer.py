# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/Assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,45,354,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,4,1,109,8,1,11,1,12,1,110,1,1,5,1,114,8,1,10,1,12,1,117,
        9,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,125,8,4,1,5,1,5,5,5,129,8,5,10,5,
        12,5,132,9,5,1,6,1,6,5,6,136,8,6,10,6,12,6,139,9,6,1,6,1,6,5,6,143,
        8,6,10,6,12,6,146,9,6,1,7,1,7,5,7,150,8,7,10,7,12,7,153,9,7,1,7,
        5,7,156,8,7,10,7,12,7,159,9,7,1,7,5,7,162,8,7,10,7,12,7,165,9,7,
        1,7,3,7,168,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,
        1,45,5,45,326,8,45,10,45,12,45,329,9,45,1,45,1,45,3,45,333,8,45,
        1,45,1,45,1,46,4,46,338,8,46,11,46,12,46,339,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,0,0,52,1,0,3,1,5,0,
        7,0,9,0,11,0,13,0,15,2,17,3,19,4,21,5,23,6,25,7,27,8,29,9,31,10,
        33,11,35,12,37,13,39,14,41,15,43,16,45,17,47,18,49,19,51,20,53,21,
        55,22,57,23,59,24,61,25,63,26,65,27,67,28,69,29,71,30,73,31,75,32,
        77,33,79,34,81,35,83,36,85,37,87,38,89,0,91,39,93,40,95,41,97,42,
        99,43,101,44,103,45,1,0,7,3,0,65,90,95,95,97,122,3,0,48,57,65,90,
        97,122,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,8,9,12,13,
        32,32,1,0,10,10,359,0,3,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,108,1,0,0,0,5,118,1,0,0,0,
        7,120,1,0,0,0,9,124,1,0,0,0,11,126,1,0,0,0,13,133,1,0,0,0,15,167,
        1,0,0,0,17,169,1,0,0,0,19,174,1,0,0,0,21,180,1,0,0,0,23,187,1,0,
        0,0,25,192,1,0,0,0,27,199,1,0,0,0,29,206,1,0,0,0,31,210,1,0,0,0,
        33,218,1,0,0,0,35,223,1,0,0,0,37,227,1,0,0,0,39,233,1,0,0,0,41,236,
        1,0,0,0,43,242,1,0,0,0,45,251,1,0,0,0,47,254,1,0,0,0,49,259,1,0,
        0,0,51,264,1,0,0,0,53,270,1,0,0,0,55,274,1,0,0,0,57,276,1,0,0,0,
        59,278,1,0,0,0,61,280,1,0,0,0,63,282,1,0,0,0,65,284,1,0,0,0,67,288,
        1,0,0,0,69,292,1,0,0,0,71,295,1,0,0,0,73,297,1,0,0,0,75,300,1,0,
        0,0,77,303,1,0,0,0,79,305,1,0,0,0,81,307,1,0,0,0,83,310,1,0,0,0,
        85,313,1,0,0,0,87,316,1,0,0,0,89,320,1,0,0,0,91,323,1,0,0,0,93,337,
        1,0,0,0,95,343,1,0,0,0,97,345,1,0,0,0,99,347,1,0,0,0,101,350,1,0,
        0,0,103,352,1,0,0,0,105,106,7,0,0,0,106,2,1,0,0,0,107,109,3,1,0,
        0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,
        0,111,115,1,0,0,0,112,114,7,1,0,0,113,112,1,0,0,0,114,117,1,0,0,
        0,115,113,1,0,0,0,115,116,1,0,0,0,116,4,1,0,0,0,117,115,1,0,0,0,
        118,119,5,48,0,0,119,6,1,0,0,0,120,121,7,2,0,0,121,8,1,0,0,0,122,
        125,3,5,2,0,123,125,3,7,3,0,124,122,1,0,0,0,124,123,1,0,0,0,125,
        10,1,0,0,0,126,130,5,46,0,0,127,129,3,9,4,0,128,127,1,0,0,0,129,
        132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,12,1,0,0,0,132,130,
        1,0,0,0,133,137,7,3,0,0,134,136,7,4,0,0,135,134,1,0,0,0,136,139,
        1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,137,
        1,0,0,0,140,144,3,7,3,0,141,143,3,9,4,0,142,141,1,0,0,0,143,146,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,14,1,0,0,0,146,144,1,
        0,0,0,147,151,3,7,3,0,148,150,3,9,4,0,149,148,1,0,0,0,150,153,1,
        0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,157,1,0,0,0,153,151,1,
        0,0,0,154,156,3,11,5,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,
        0,0,0,157,158,1,0,0,0,158,163,1,0,0,0,159,157,1,0,0,0,160,162,3,
        13,6,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,
        0,0,0,164,168,1,0,0,0,165,163,1,0,0,0,166,168,3,5,2,0,167,147,1,
        0,0,0,167,166,1,0,0,0,168,16,1,0,0,0,169,170,5,116,0,0,170,171,5,
        114,0,0,171,172,5,117,0,0,172,173,5,101,0,0,173,18,1,0,0,0,174,175,
        5,102,0,0,175,176,5,97,0,0,176,177,5,108,0,0,177,178,5,115,0,0,178,
        179,5,101,0,0,179,20,1,0,0,0,180,181,5,110,0,0,181,182,5,117,0,0,
        182,183,5,109,0,0,183,184,5,98,0,0,184,185,5,101,0,0,185,186,5,114,
        0,0,186,22,1,0,0,0,187,188,5,98,0,0,188,189,5,111,0,0,189,190,5,
        111,0,0,190,191,5,108,0,0,191,24,1,0,0,0,192,193,5,115,0,0,193,194,
        5,116,0,0,194,195,5,114,0,0,195,196,5,105,0,0,196,197,5,110,0,0,
        197,198,5,103,0,0,198,26,1,0,0,0,199,200,5,114,0,0,200,201,5,101,
        0,0,201,202,5,116,0,0,202,203,5,117,0,0,203,204,5,114,0,0,204,205,
        5,110,0,0,205,28,1,0,0,0,206,207,5,118,0,0,207,208,5,97,0,0,208,
        209,5,114,0,0,209,30,1,0,0,0,210,211,5,100,0,0,211,212,5,121,0,0,
        212,213,5,110,0,0,213,214,5,97,0,0,214,215,5,109,0,0,215,216,5,105,
        0,0,216,217,5,99,0,0,217,32,1,0,0,0,218,219,5,102,0,0,219,220,5,
        117,0,0,220,221,5,110,0,0,221,222,5,99,0,0,222,34,1,0,0,0,223,224,
        5,102,0,0,224,225,5,111,0,0,225,226,5,114,0,0,226,36,1,0,0,0,227,
        228,5,117,0,0,228,229,5,110,0,0,229,230,5,116,0,0,230,231,5,105,
        0,0,231,232,5,108,0,0,232,38,1,0,0,0,233,234,5,98,0,0,234,235,5,
        121,0,0,235,40,1,0,0,0,236,237,5,98,0,0,237,238,5,114,0,0,238,239,
        5,101,0,0,239,240,5,97,0,0,240,241,5,107,0,0,241,42,1,0,0,0,242,
        243,5,99,0,0,243,244,5,111,0,0,244,245,5,110,0,0,245,246,5,116,0,
        0,246,247,5,105,0,0,247,248,5,110,0,0,248,249,5,117,0,0,249,250,
        5,101,0,0,250,44,1,0,0,0,251,252,5,105,0,0,252,253,5,102,0,0,253,
        46,1,0,0,0,254,255,5,101,0,0,255,256,5,108,0,0,256,257,5,115,0,0,
        257,258,5,101,0,0,258,48,1,0,0,0,259,260,5,101,0,0,260,261,5,108,
        0,0,261,262,5,105,0,0,262,263,5,102,0,0,263,50,1,0,0,0,264,265,5,
        98,0,0,265,266,5,101,0,0,266,267,5,103,0,0,267,268,5,105,0,0,268,
        269,5,110,0,0,269,52,1,0,0,0,270,271,5,101,0,0,271,272,5,110,0,0,
        272,273,5,100,0,0,273,54,1,0,0,0,274,275,5,43,0,0,275,56,1,0,0,0,
        276,277,5,45,0,0,277,58,1,0,0,0,278,279,5,42,0,0,279,60,1,0,0,0,
        280,281,5,47,0,0,281,62,1,0,0,0,282,283,5,37,0,0,283,64,1,0,0,0,
        284,285,5,110,0,0,285,286,5,111,0,0,286,287,5,116,0,0,287,66,1,0,
        0,0,288,289,5,97,0,0,289,290,5,110,0,0,290,291,5,100,0,0,291,68,
        1,0,0,0,292,293,5,111,0,0,293,294,5,114,0,0,294,70,1,0,0,0,295,296,
        5,61,0,0,296,72,1,0,0,0,297,298,5,60,0,0,298,299,5,45,0,0,299,74,
        1,0,0,0,300,301,5,33,0,0,301,302,5,61,0,0,302,76,1,0,0,0,303,304,
        5,60,0,0,304,78,1,0,0,0,305,306,5,62,0,0,306,80,1,0,0,0,307,308,
        5,60,0,0,308,309,5,61,0,0,309,82,1,0,0,0,310,311,5,62,0,0,311,312,
        5,61,0,0,312,84,1,0,0,0,313,314,5,61,0,0,314,315,5,61,0,0,315,86,
        1,0,0,0,316,317,5,46,0,0,317,318,5,46,0,0,318,319,5,46,0,0,319,88,
        1,0,0,0,320,321,5,35,0,0,321,322,5,35,0,0,322,90,1,0,0,0,323,327,
        3,89,44,0,324,326,3,97,48,0,325,324,1,0,0,0,326,329,1,0,0,0,327,
        325,1,0,0,0,327,328,1,0,0,0,328,332,1,0,0,0,329,327,1,0,0,0,330,
        333,3,95,47,0,331,333,5,0,0,1,332,330,1,0,0,0,332,331,1,0,0,0,333,
        334,1,0,0,0,334,335,6,45,0,0,335,92,1,0,0,0,336,338,7,5,0,0,337,
        336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
        341,1,0,0,0,341,342,6,46,1,0,342,94,1,0,0,0,343,344,5,10,0,0,344,
        96,1,0,0,0,345,346,8,6,0,0,346,98,1,0,0,0,347,348,9,0,0,0,348,349,
        6,49,2,0,349,100,1,0,0,0,350,351,9,0,0,0,351,102,1,0,0,0,352,353,
        9,0,0,0,353,104,1,0,0,0,14,0,110,115,124,130,137,144,151,157,163,
        167,327,332,339,3,1,45,1,6,0,0,1,49,0
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IDENTIFIER = 1
    NUMBER = 2
    KW_TRUE = 3
    KW_FALSE = 4
    KW_NUMBER = 5
    KW_BOOL = 6
    KW_STRING = 7
    KW_RETURN = 8
    KW_VAR = 9
    KW_DYNAMIC = 10
    KW_FUNC = 11
    KW_FOR = 12
    KW_UNTIL = 13
    KW_BY = 14
    KW_BREAK = 15
    KW_CONTINUE = 16
    KW_IF = 17
    KW_ELSE = 18
    KW_ELIF = 19
    KW_BEGIN = 20
    KW_END = 21
    OP_ADD = 22
    OP_SUBTRACT = 23
    OP_MULTI = 24
    OP_DIVIDE = 25
    OP_REMAINDER = 26
    OP_NOT = 27
    OP_AND = 28
    OP_OR = 29
    OP_EQUAL = 30
    OP_LEFT_ARROW = 31
    OP_NOT_EQUAL = 32
    OP_SMALLER = 33
    OP_GREATER = 34
    OP_SMALLER_EQUAL = 35
    OP_GREATER_EQUAL = 36
    OP_EQUAL_COMPARE = 37
    OP_TRIPLE_DOT = 38
    COMMENT = 39
    WS = 40
    NEW_LINE = 41
    NOT_NEW_LINE = 42
    ERROR_CHAR = 43
    UNCLOSE_STRING = 44
    ILLEGAL_ESCAPE = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", 
            "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'=='", "'...'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "NUMBER", "KW_TRUE", "KW_FALSE", "KW_NUMBER", 
            "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", 
            "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", 
            "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", 
            "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", "OP_NOT", 
            "OP_AND", "OP_OR", "OP_EQUAL", "OP_LEFT_ARROW", "OP_NOT_EQUAL", 
            "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", 
            "OP_EQUAL_COMPARE", "OP_TRIPLE_DOT", "COMMENT", "WS", "NEW_LINE", 
            "NOT_NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IDENTIFIER_HEAD", "IDENTIFIER", "ZERO", "NON_ZERO_DIGIT", 
                  "DIGIT", "FLOATING_POINT", "EXPONENTIAL", "NUMBER", "KW_TRUE", 
                  "KW_FALSE", "KW_NUMBER", "KW_BOOL", "KW_STRING", "KW_RETURN", 
                  "KW_VAR", "KW_DYNAMIC", "KW_FUNC", "KW_FOR", "KW_UNTIL", 
                  "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", "KW_ELSE", 
                  "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", "OP_SUBTRACT", 
                  "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", "OP_NOT", "OP_AND", 
                  "OP_OR", "OP_EQUAL", "OP_LEFT_ARROW", "OP_NOT_EQUAL", 
                  "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", 
                  "OP_EQUAL_COMPARE", "OP_TRIPLE_DOT", "COMMENT_HEAD", "COMMENT", 
                  "WS", "NEW_LINE", "NOT_NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[45] = self.COMMENT_action 
            actions[49] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def COMMENT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            skip()
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise ErrorToken(self.text)
     


