# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,51,449,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,
        37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,
        43,5,43,313,8,43,10,43,12,43,316,9,43,1,43,1,43,1,44,4,44,321,8,
        44,11,44,12,44,322,1,44,1,44,1,45,1,45,3,45,329,8,45,1,45,1,45,1,
        46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,5,49,341,8,49,10,49,12,49,
        344,9,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,3,53,355,8,
        53,1,54,4,54,358,8,54,11,54,12,54,359,1,55,1,55,5,55,364,8,55,10,
        55,12,55,367,9,55,1,55,3,55,370,8,55,1,56,1,56,1,56,3,56,375,8,56,
        1,56,4,56,378,8,56,11,56,12,56,379,1,56,3,56,383,8,56,1,57,1,57,
        1,57,1,57,1,57,3,57,390,8,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,
        1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,
        3,65,412,8,65,1,66,1,66,1,66,5,66,417,8,66,10,66,12,66,420,9,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,5,68,431,8,68,10,68,
        12,68,434,9,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,442,8,69,10,69,
        12,69,445,9,69,1,69,1,69,1,69,0,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,0,87,43,89,44,91,45,93,0,95,0,97,0,99,0,101,46,103,
        0,105,0,107,0,109,0,111,0,113,0,115,47,117,0,119,0,121,0,123,0,125,
        0,127,0,129,0,131,0,133,48,135,49,137,50,139,51,1,0,12,3,0,8,9,12,
        12,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,92,
        92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,4,0,10,
        10,13,13,34,34,92,92,1,0,39,39,1,0,34,34,449,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,101,1,0,0,0,0,115,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,141,
        1,0,0,0,3,146,1,0,0,0,5,151,1,0,0,0,7,157,1,0,0,0,9,164,1,0,0,0,
        11,169,1,0,0,0,13,176,1,0,0,0,15,183,1,0,0,0,17,187,1,0,0,0,19,195,
        1,0,0,0,21,200,1,0,0,0,23,204,1,0,0,0,25,210,1,0,0,0,27,213,1,0,
        0,0,29,219,1,0,0,0,31,228,1,0,0,0,33,231,1,0,0,0,35,236,1,0,0,0,
        37,241,1,0,0,0,39,247,1,0,0,0,41,251,1,0,0,0,43,253,1,0,0,0,45,255,
        1,0,0,0,47,257,1,0,0,0,49,259,1,0,0,0,51,261,1,0,0,0,53,265,1,0,
        0,0,55,269,1,0,0,0,57,272,1,0,0,0,59,274,1,0,0,0,61,277,1,0,0,0,
        63,280,1,0,0,0,65,282,1,0,0,0,67,284,1,0,0,0,69,287,1,0,0,0,71,290,
        1,0,0,0,73,293,1,0,0,0,75,297,1,0,0,0,77,299,1,0,0,0,79,301,1,0,
        0,0,81,303,1,0,0,0,83,305,1,0,0,0,85,307,1,0,0,0,87,310,1,0,0,0,
        89,320,1,0,0,0,91,328,1,0,0,0,93,332,1,0,0,0,95,335,1,0,0,0,97,337,
        1,0,0,0,99,342,1,0,0,0,101,345,1,0,0,0,103,348,1,0,0,0,105,350,1,
        0,0,0,107,354,1,0,0,0,109,357,1,0,0,0,111,369,1,0,0,0,113,382,1,
        0,0,0,115,389,1,0,0,0,117,391,1,0,0,0,119,393,1,0,0,0,121,396,1,
        0,0,0,123,398,1,0,0,0,125,400,1,0,0,0,127,403,1,0,0,0,129,405,1,
        0,0,0,131,411,1,0,0,0,133,413,1,0,0,0,135,424,1,0,0,0,137,427,1,
        0,0,0,139,438,1,0,0,0,141,142,5,109,0,0,142,143,5,97,0,0,143,144,
        5,105,0,0,144,145,5,110,0,0,145,2,1,0,0,0,146,147,5,116,0,0,147,
        148,5,114,0,0,148,149,5,117,0,0,149,150,5,101,0,0,150,4,1,0,0,0,
        151,152,5,102,0,0,152,153,5,97,0,0,153,154,5,108,0,0,154,155,5,115,
        0,0,155,156,5,101,0,0,156,6,1,0,0,0,157,158,5,110,0,0,158,159,5,
        117,0,0,159,160,5,109,0,0,160,161,5,98,0,0,161,162,5,101,0,0,162,
        163,5,114,0,0,163,8,1,0,0,0,164,165,5,98,0,0,165,166,5,111,0,0,166,
        167,5,111,0,0,167,168,5,108,0,0,168,10,1,0,0,0,169,170,5,115,0,0,
        170,171,5,116,0,0,171,172,5,114,0,0,172,173,5,105,0,0,173,174,5,
        110,0,0,174,175,5,103,0,0,175,12,1,0,0,0,176,177,5,114,0,0,177,178,
        5,101,0,0,178,179,5,116,0,0,179,180,5,117,0,0,180,181,5,114,0,0,
        181,182,5,110,0,0,182,14,1,0,0,0,183,184,5,118,0,0,184,185,5,97,
        0,0,185,186,5,114,0,0,186,16,1,0,0,0,187,188,5,100,0,0,188,189,5,
        121,0,0,189,190,5,110,0,0,190,191,5,97,0,0,191,192,5,109,0,0,192,
        193,5,105,0,0,193,194,5,99,0,0,194,18,1,0,0,0,195,196,5,102,0,0,
        196,197,5,117,0,0,197,198,5,110,0,0,198,199,5,99,0,0,199,20,1,0,
        0,0,200,201,5,102,0,0,201,202,5,111,0,0,202,203,5,114,0,0,203,22,
        1,0,0,0,204,205,5,117,0,0,205,206,5,110,0,0,206,207,5,116,0,0,207,
        208,5,105,0,0,208,209,5,108,0,0,209,24,1,0,0,0,210,211,5,98,0,0,
        211,212,5,121,0,0,212,26,1,0,0,0,213,214,5,98,0,0,214,215,5,114,
        0,0,215,216,5,101,0,0,216,217,5,97,0,0,217,218,5,107,0,0,218,28,
        1,0,0,0,219,220,5,99,0,0,220,221,5,111,0,0,221,222,5,110,0,0,222,
        223,5,116,0,0,223,224,5,105,0,0,224,225,5,110,0,0,225,226,5,117,
        0,0,226,227,5,101,0,0,227,30,1,0,0,0,228,229,5,105,0,0,229,230,5,
        102,0,0,230,32,1,0,0,0,231,232,5,101,0,0,232,233,5,108,0,0,233,234,
        5,115,0,0,234,235,5,101,0,0,235,34,1,0,0,0,236,237,5,101,0,0,237,
        238,5,108,0,0,238,239,5,105,0,0,239,240,5,102,0,0,240,36,1,0,0,0,
        241,242,5,98,0,0,242,243,5,101,0,0,243,244,5,103,0,0,244,245,5,105,
        0,0,245,246,5,110,0,0,246,38,1,0,0,0,247,248,5,101,0,0,248,249,5,
        110,0,0,249,250,5,100,0,0,250,40,1,0,0,0,251,252,5,43,0,0,252,42,
        1,0,0,0,253,254,5,45,0,0,254,44,1,0,0,0,255,256,5,42,0,0,256,46,
        1,0,0,0,257,258,5,47,0,0,258,48,1,0,0,0,259,260,5,37,0,0,260,50,
        1,0,0,0,261,262,5,110,0,0,262,263,5,111,0,0,263,264,5,116,0,0,264,
        52,1,0,0,0,265,266,5,97,0,0,266,267,5,110,0,0,267,268,5,100,0,0,
        268,54,1,0,0,0,269,270,5,111,0,0,270,271,5,114,0,0,271,56,1,0,0,
        0,272,273,5,61,0,0,273,58,1,0,0,0,274,275,5,60,0,0,275,276,5,45,
        0,0,276,60,1,0,0,0,277,278,5,33,0,0,278,279,5,61,0,0,279,62,1,0,
        0,0,280,281,5,60,0,0,281,64,1,0,0,0,282,283,5,62,0,0,283,66,1,0,
        0,0,284,285,5,60,0,0,285,286,5,61,0,0,286,68,1,0,0,0,287,288,5,62,
        0,0,288,289,5,61,0,0,289,70,1,0,0,0,290,291,5,61,0,0,291,292,5,61,
        0,0,292,72,1,0,0,0,293,294,5,46,0,0,294,295,5,46,0,0,295,296,5,46,
        0,0,296,74,1,0,0,0,297,298,5,40,0,0,298,76,1,0,0,0,299,300,5,41,
        0,0,300,78,1,0,0,0,301,302,5,91,0,0,302,80,1,0,0,0,303,304,5,93,
        0,0,304,82,1,0,0,0,305,306,5,44,0,0,306,84,1,0,0,0,307,308,5,35,
        0,0,308,309,5,35,0,0,309,86,1,0,0,0,310,314,3,85,42,0,311,313,3,
        95,47,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,
        1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,6,43,0,0,318,88,
        1,0,0,0,319,321,7,0,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,
        1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,6,44,0,0,325,90,
        1,0,0,0,326,329,3,93,46,0,327,329,7,1,0,0,328,326,1,0,0,0,328,327,
        1,0,0,0,329,330,1,0,0,0,330,331,6,45,1,0,331,92,1,0,0,0,332,333,
        5,13,0,0,333,334,5,10,0,0,334,94,1,0,0,0,335,336,8,1,0,0,336,96,
        1,0,0,0,337,338,7,2,0,0,338,98,1,0,0,0,339,341,7,3,0,0,340,339,1,
        0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,100,1,
        0,0,0,344,342,1,0,0,0,345,346,3,97,48,0,346,347,3,99,49,0,347,102,
        1,0,0,0,348,349,5,48,0,0,349,104,1,0,0,0,350,351,7,4,0,0,351,106,
        1,0,0,0,352,355,3,103,51,0,353,355,3,105,52,0,354,352,1,0,0,0,354,
        353,1,0,0,0,355,108,1,0,0,0,356,358,3,107,53,0,357,356,1,0,0,0,358,
        359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,110,1,0,0,0,361,
        365,5,46,0,0,362,364,3,107,53,0,363,362,1,0,0,0,364,367,1,0,0,0,
        365,363,1,0,0,0,365,366,1,0,0,0,366,370,1,0,0,0,367,365,1,0,0,0,
        368,370,1,0,0,0,369,361,1,0,0,0,369,368,1,0,0,0,370,112,1,0,0,0,
        371,374,7,5,0,0,372,375,7,6,0,0,373,375,1,0,0,0,374,372,1,0,0,0,
        374,373,1,0,0,0,375,377,1,0,0,0,376,378,3,107,53,0,377,376,1,0,0,
        0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,383,1,0,0,
        0,381,383,1,0,0,0,382,371,1,0,0,0,382,381,1,0,0,0,383,114,1,0,0,
        0,384,385,3,109,54,0,385,386,3,111,55,0,386,387,3,113,56,0,387,390,
        1,0,0,0,388,390,3,103,51,0,389,384,1,0,0,0,389,388,1,0,0,0,390,116,
        1,0,0,0,391,392,7,7,0,0,392,118,1,0,0,0,393,394,3,117,58,0,394,395,
        3,121,60,0,395,120,1,0,0,0,396,397,7,8,0,0,397,122,1,0,0,0,398,399,
        8,8,0,0,399,124,1,0,0,0,400,401,3,117,58,0,401,402,3,123,61,0,402,
        126,1,0,0,0,403,404,8,9,0,0,404,128,1,0,0,0,405,406,7,10,0,0,406,
        407,7,11,0,0,407,130,1,0,0,0,408,412,3,119,59,0,409,412,3,129,64,
        0,410,412,3,127,63,0,411,408,1,0,0,0,411,409,1,0,0,0,411,410,1,0,
        0,0,412,132,1,0,0,0,413,418,7,11,0,0,414,417,3,91,45,0,415,417,3,
        131,65,0,416,414,1,0,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,
        1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,
        7,11,0,0,422,423,6,66,2,0,423,134,1,0,0,0,424,425,9,0,0,0,425,426,
        6,67,3,0,426,136,1,0,0,0,427,432,7,11,0,0,428,431,3,131,65,0,429,
        431,3,91,45,0,430,428,1,0,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,
        430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,
        436,5,0,0,1,436,437,6,68,4,0,437,138,1,0,0,0,438,443,7,11,0,0,439,
        442,3,131,65,0,440,442,3,91,45,0,441,439,1,0,0,0,441,440,1,0,0,0,
        442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,
        445,443,1,0,0,0,446,447,3,125,62,0,447,448,6,69,5,0,448,140,1,0,
        0,0,20,0,314,322,328,342,354,359,365,369,374,379,382,389,411,416,
        418,430,432,441,443,6,6,0,0,1,45,0,1,66,1,1,67,2,1,68,3,1,69,4
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MAIN_TOKEN = 1
    KW_TRUE = 2
    KW_FALSE = 3
    KW_NUMBER = 4
    KW_BOOL = 5
    KW_STRING = 6
    KW_RETURN = 7
    KW_VAR = 8
    KW_DYNAMIC = 9
    KW_FUNC = 10
    KW_FOR = 11
    KW_UNTIL = 12
    KW_BY = 13
    KW_BREAK = 14
    KW_CONTINUE = 15
    KW_IF = 16
    KW_ELSE = 17
    KW_ELIF = 18
    KW_BEGIN = 19
    KW_END = 20
    OP_ADD = 21
    OP_SUBTRACT = 22
    OP_MULTI = 23
    OP_DIVIDE = 24
    OP_REMAINDER = 25
    OP_NOT = 26
    OP_AND = 27
    OP_OR = 28
    OP_EQUAL = 29
    OP_ASSIGN = 30
    OP_NOT_EQUAL = 31
    OP_SMALLER = 32
    OP_GREATER = 33
    OP_SMALLER_EQUAL = 34
    OP_GREATER_EQUAL = 35
    OP_STRING_EQUAL = 36
    OP_STRING_CONCAT = 37
    SEP_OPEN_PAREN = 38
    SEP_CLOSE_PAREN = 39
    SEP_OPEN_BRACK = 40
    SEP_CLOSE_BRACK = 41
    SEP_COMA = 42
    COMMENT = 43
    WS = 44
    NEW_LINE = 45
    IDENTIFIER = 46
    NUMBER = 47
    STRING = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'true'", "'false'", "'number'", "'bool'", "'string'", 
            "'return'", "'var'", "'dynamic'", "'func'", "'for'", "'until'", 
            "'by'", "'break'", "'continue'", "'if'", "'else'", "'elif'", 
            "'begin'", "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", 
            "'and'", "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'...'", "'('", "')'", "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", 
            "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", 
            "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", 
            "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", "OP_SUBTRACT", 
            "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", "OP_NOT", "OP_AND", 
            "OP_OR", "OP_EQUAL", "OP_ASSIGN", "OP_NOT_EQUAL", "OP_SMALLER", 
            "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", "OP_STRING_EQUAL", 
            "OP_STRING_CONCAT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
            "SEP_CLOSE_BRACK", "SEP_COMA", "COMMENT", "WS", "NEW_LINE", 
            "IDENTIFIER", "NUMBER", "STRING", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", 
                  "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", 
                  "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", 
                  "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", 
                  "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", 
                  "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", "OP_ASSIGN", 
                  "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", 
                  "OP_GREATER_EQUAL", "OP_STRING_EQUAL", "OP_STRING_CONCAT", 
                  "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
                  "SEP_CLOSE_BRACK", "SEP_COMA", "COMMENT_HEAD", "COMMENT", 
                  "WS", "NEW_LINE", "WINDOW_NEW_LINE", "NOT_NEW_LINE", "IDENTIFIER_HEAD", 
                  "IDENTIFIER_TAIL", "IDENTIFIER", "ZERO", "NON_ZERO_DIGIT", 
                  "DIGIT", "DECIMAL", "FLOATING_POINT", "EXPONENTIAL", "NUMBER", 
                  "ESCAPE_SIGN", "ESCAPE_SEQUENCE", "ESCAPE_REP", "NOT_ESCAPE_REP", 
                  "ILLEGAL_ESCAPE_SEQ", "STRING_CHAR", "DOUBLE_QUOTE_IN_STRING", 
                  "STRING_LITTERAL", "STRING", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[45] = self.NEW_LINE_action 
            actions[66] = self.STRING_action 
            actions[67] = self.ERROR_CHAR_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEW_LINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace("\r\n", "\n").replace("\r", "\n")
     

    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text.replace("\r\n", "\n").replace("\r", "\n")
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text.replace("\r\n", "\n").replace("\r", "\n")
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.text = self.text.replace("\r\n", "\n").replace("\r", "\n")
            raise IllegalEscape(self.text[1:])
     


