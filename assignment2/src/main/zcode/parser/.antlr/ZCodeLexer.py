# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/assignment2/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,51,452,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,5,42,308,8,42,10,42,
        12,42,311,9,42,1,42,1,42,1,43,4,43,316,8,43,11,43,12,43,317,1,43,
        1,43,1,44,1,44,3,44,324,8,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,5,48,336,8,48,10,48,12,48,339,9,48,1,49,1,49,1,49,
        1,49,3,49,345,8,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,
        1,53,1,53,3,53,358,8,53,1,54,4,54,361,8,54,11,54,12,54,362,1,55,
        1,55,5,55,367,8,55,10,55,12,55,370,9,55,1,55,3,55,373,8,55,1,56,
        1,56,1,56,3,56,378,8,56,1,56,4,56,381,8,56,11,56,12,56,382,1,56,
        3,56,386,8,56,1,57,1,57,1,57,1,57,1,57,3,57,393,8,57,1,58,1,58,1,
        59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,
        64,1,64,1,65,1,65,1,65,3,65,415,8,65,1,66,1,66,5,66,419,8,66,10,
        66,12,66,422,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,5,68,432,
        8,68,10,68,12,68,435,9,68,1,68,1,68,3,68,439,8,68,1,68,1,68,1,69,
        1,69,5,69,445,8,69,10,69,12,69,448,9,69,1,69,1,69,1,69,0,0,70,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,0,85,42,87,43,89,44,91,0,93,
        0,95,0,97,0,99,45,101,46,103,0,105,0,107,0,109,0,111,0,113,0,115,
        47,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,48,135,49,
        137,50,139,51,1,0,12,3,0,8,9,12,12,32,32,2,0,10,10,13,13,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,2,0,69,69,
        101,101,2,0,43,43,45,45,1,0,92,92,7,0,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,1,0,39,39,1,
        0,34,34,451,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,115,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,146,1,0,0,0,5,152,1,
        0,0,0,7,159,1,0,0,0,9,164,1,0,0,0,11,171,1,0,0,0,13,178,1,0,0,0,
        15,182,1,0,0,0,17,190,1,0,0,0,19,195,1,0,0,0,21,199,1,0,0,0,23,205,
        1,0,0,0,25,208,1,0,0,0,27,214,1,0,0,0,29,223,1,0,0,0,31,226,1,0,
        0,0,33,231,1,0,0,0,35,236,1,0,0,0,37,242,1,0,0,0,39,246,1,0,0,0,
        41,248,1,0,0,0,43,250,1,0,0,0,45,252,1,0,0,0,47,254,1,0,0,0,49,256,
        1,0,0,0,51,260,1,0,0,0,53,264,1,0,0,0,55,267,1,0,0,0,57,269,1,0,
        0,0,59,272,1,0,0,0,61,275,1,0,0,0,63,277,1,0,0,0,65,279,1,0,0,0,
        67,282,1,0,0,0,69,285,1,0,0,0,71,288,1,0,0,0,73,292,1,0,0,0,75,294,
        1,0,0,0,77,296,1,0,0,0,79,298,1,0,0,0,81,300,1,0,0,0,83,302,1,0,
        0,0,85,305,1,0,0,0,87,315,1,0,0,0,89,323,1,0,0,0,91,327,1,0,0,0,
        93,330,1,0,0,0,95,332,1,0,0,0,97,337,1,0,0,0,99,344,1,0,0,0,101,
        346,1,0,0,0,103,351,1,0,0,0,105,353,1,0,0,0,107,357,1,0,0,0,109,
        360,1,0,0,0,111,372,1,0,0,0,113,385,1,0,0,0,115,392,1,0,0,0,117,
        394,1,0,0,0,119,396,1,0,0,0,121,399,1,0,0,0,123,401,1,0,0,0,125,
        403,1,0,0,0,127,406,1,0,0,0,129,408,1,0,0,0,131,414,1,0,0,0,133,
        416,1,0,0,0,135,426,1,0,0,0,137,429,1,0,0,0,139,442,1,0,0,0,141,
        142,5,116,0,0,142,143,5,114,0,0,143,144,5,117,0,0,144,145,5,101,
        0,0,145,2,1,0,0,0,146,147,5,102,0,0,147,148,5,97,0,0,148,149,5,108,
        0,0,149,150,5,115,0,0,150,151,5,101,0,0,151,4,1,0,0,0,152,153,5,
        110,0,0,153,154,5,117,0,0,154,155,5,109,0,0,155,156,5,98,0,0,156,
        157,5,101,0,0,157,158,5,114,0,0,158,6,1,0,0,0,159,160,5,98,0,0,160,
        161,5,111,0,0,161,162,5,111,0,0,162,163,5,108,0,0,163,8,1,0,0,0,
        164,165,5,115,0,0,165,166,5,116,0,0,166,167,5,114,0,0,167,168,5,
        105,0,0,168,169,5,110,0,0,169,170,5,103,0,0,170,10,1,0,0,0,171,172,
        5,114,0,0,172,173,5,101,0,0,173,174,5,116,0,0,174,175,5,117,0,0,
        175,176,5,114,0,0,176,177,5,110,0,0,177,12,1,0,0,0,178,179,5,118,
        0,0,179,180,5,97,0,0,180,181,5,114,0,0,181,14,1,0,0,0,182,183,5,
        100,0,0,183,184,5,121,0,0,184,185,5,110,0,0,185,186,5,97,0,0,186,
        187,5,109,0,0,187,188,5,105,0,0,188,189,5,99,0,0,189,16,1,0,0,0,
        190,191,5,102,0,0,191,192,5,117,0,0,192,193,5,110,0,0,193,194,5,
        99,0,0,194,18,1,0,0,0,195,196,5,102,0,0,196,197,5,111,0,0,197,198,
        5,114,0,0,198,20,1,0,0,0,199,200,5,117,0,0,200,201,5,110,0,0,201,
        202,5,116,0,0,202,203,5,105,0,0,203,204,5,108,0,0,204,22,1,0,0,0,
        205,206,5,98,0,0,206,207,5,121,0,0,207,24,1,0,0,0,208,209,5,98,0,
        0,209,210,5,114,0,0,210,211,5,101,0,0,211,212,5,97,0,0,212,213,5,
        107,0,0,213,26,1,0,0,0,214,215,5,99,0,0,215,216,5,111,0,0,216,217,
        5,110,0,0,217,218,5,116,0,0,218,219,5,105,0,0,219,220,5,110,0,0,
        220,221,5,117,0,0,221,222,5,101,0,0,222,28,1,0,0,0,223,224,5,105,
        0,0,224,225,5,102,0,0,225,30,1,0,0,0,226,227,5,101,0,0,227,228,5,
        108,0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,32,1,0,0,0,231,232,
        5,101,0,0,232,233,5,108,0,0,233,234,5,105,0,0,234,235,5,102,0,0,
        235,34,1,0,0,0,236,237,5,98,0,0,237,238,5,101,0,0,238,239,5,103,
        0,0,239,240,5,105,0,0,240,241,5,110,0,0,241,36,1,0,0,0,242,243,5,
        101,0,0,243,244,5,110,0,0,244,245,5,100,0,0,245,38,1,0,0,0,246,247,
        5,43,0,0,247,40,1,0,0,0,248,249,5,45,0,0,249,42,1,0,0,0,250,251,
        5,42,0,0,251,44,1,0,0,0,252,253,5,47,0,0,253,46,1,0,0,0,254,255,
        5,37,0,0,255,48,1,0,0,0,256,257,5,110,0,0,257,258,5,111,0,0,258,
        259,5,116,0,0,259,50,1,0,0,0,260,261,5,97,0,0,261,262,5,110,0,0,
        262,263,5,100,0,0,263,52,1,0,0,0,264,265,5,111,0,0,265,266,5,114,
        0,0,266,54,1,0,0,0,267,268,5,61,0,0,268,56,1,0,0,0,269,270,5,60,
        0,0,270,271,5,45,0,0,271,58,1,0,0,0,272,273,5,33,0,0,273,274,5,61,
        0,0,274,60,1,0,0,0,275,276,5,60,0,0,276,62,1,0,0,0,277,278,5,62,
        0,0,278,64,1,0,0,0,279,280,5,60,0,0,280,281,5,61,0,0,281,66,1,0,
        0,0,282,283,5,62,0,0,283,284,5,61,0,0,284,68,1,0,0,0,285,286,5,61,
        0,0,286,287,5,61,0,0,287,70,1,0,0,0,288,289,5,46,0,0,289,290,5,46,
        0,0,290,291,5,46,0,0,291,72,1,0,0,0,292,293,5,40,0,0,293,74,1,0,
        0,0,294,295,5,41,0,0,295,76,1,0,0,0,296,297,5,91,0,0,297,78,1,0,
        0,0,298,299,5,93,0,0,299,80,1,0,0,0,300,301,5,44,0,0,301,82,1,0,
        0,0,302,303,5,35,0,0,303,304,5,35,0,0,304,84,1,0,0,0,305,309,3,83,
        41,0,306,308,3,93,46,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,
        0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,313,6,
        42,0,0,313,86,1,0,0,0,314,316,7,0,0,0,315,314,1,0,0,0,316,317,1,
        0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,320,6,
        43,0,0,320,88,1,0,0,0,321,324,3,91,45,0,322,324,7,1,0,0,323,321,
        1,0,0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,326,6,44,1,0,326,90,
        1,0,0,0,327,328,5,13,0,0,328,329,5,10,0,0,329,92,1,0,0,0,330,331,
        8,1,0,0,331,94,1,0,0,0,332,333,7,2,0,0,333,96,1,0,0,0,334,336,7,
        3,0,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,
        0,0,0,338,98,1,0,0,0,339,337,1,0,0,0,340,341,3,95,47,0,341,342,3,
        97,48,0,342,345,1,0,0,0,343,345,3,101,50,0,344,340,1,0,0,0,344,343,
        1,0,0,0,345,100,1,0,0,0,346,347,5,109,0,0,347,348,5,97,0,0,348,349,
        5,105,0,0,349,350,5,110,0,0,350,102,1,0,0,0,351,352,5,48,0,0,352,
        104,1,0,0,0,353,354,7,4,0,0,354,106,1,0,0,0,355,358,3,103,51,0,356,
        358,3,105,52,0,357,355,1,0,0,0,357,356,1,0,0,0,358,108,1,0,0,0,359,
        361,3,107,53,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
        363,1,0,0,0,363,110,1,0,0,0,364,368,5,46,0,0,365,367,3,107,53,0,
        366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,
        369,373,1,0,0,0,370,368,1,0,0,0,371,373,1,0,0,0,372,364,1,0,0,0,
        372,371,1,0,0,0,373,112,1,0,0,0,374,377,7,5,0,0,375,378,7,6,0,0,
        376,378,1,0,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,380,1,0,0,0,
        379,381,3,107,53,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,
        0,382,383,1,0,0,0,383,386,1,0,0,0,384,386,1,0,0,0,385,374,1,0,0,
        0,385,384,1,0,0,0,386,114,1,0,0,0,387,388,3,109,54,0,388,389,3,111,
        55,0,389,390,3,113,56,0,390,393,1,0,0,0,391,393,3,103,51,0,392,387,
        1,0,0,0,392,391,1,0,0,0,393,116,1,0,0,0,394,395,7,7,0,0,395,118,
        1,0,0,0,396,397,3,117,58,0,397,398,3,121,60,0,398,120,1,0,0,0,399,
        400,7,8,0,0,400,122,1,0,0,0,401,402,8,8,0,0,402,124,1,0,0,0,403,
        404,3,117,58,0,404,405,3,123,61,0,405,126,1,0,0,0,406,407,8,9,0,
        0,407,128,1,0,0,0,408,409,7,10,0,0,409,410,7,11,0,0,410,130,1,0,
        0,0,411,415,3,119,59,0,412,415,3,129,64,0,413,415,3,127,63,0,414,
        411,1,0,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,132,1,0,0,0,416,
        420,7,11,0,0,417,419,3,131,65,0,418,417,1,0,0,0,419,422,1,0,0,0,
        420,418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,
        423,424,7,11,0,0,424,425,6,66,2,0,425,134,1,0,0,0,426,427,9,0,0,
        0,427,428,6,67,3,0,428,136,1,0,0,0,429,433,7,11,0,0,430,432,3,131,
        65,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,
        0,0,434,438,1,0,0,0,435,433,1,0,0,0,436,439,3,89,44,0,437,439,5,
        0,0,1,438,436,1,0,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,441,6,
        68,4,0,441,138,1,0,0,0,442,446,7,11,0,0,443,445,3,131,65,0,444,443,
        1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,
        1,0,0,0,448,446,1,0,0,0,449,450,3,125,62,0,450,451,6,69,5,0,451,
        140,1,0,0,0,19,0,309,317,323,337,344,357,362,368,372,377,382,385,
        392,414,420,433,438,446,6,6,0,0,1,44,0,1,66,1,1,67,2,1,68,3,1,69,
        4
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    KW_TRUE = 1
    KW_FALSE = 2
    KW_NUMBER = 3
    KW_BOOL = 4
    KW_STRING = 5
    KW_RETURN = 6
    KW_VAR = 7
    KW_DYNAMIC = 8
    KW_FUNC = 9
    KW_FOR = 10
    KW_UNTIL = 11
    KW_BY = 12
    KW_BREAK = 13
    KW_CONTINUE = 14
    KW_IF = 15
    KW_ELSE = 16
    KW_ELIF = 17
    KW_BEGIN = 18
    KW_END = 19
    OP_ADD = 20
    OP_SUBTRACT = 21
    OP_MULTI = 22
    OP_DIVIDE = 23
    OP_REMAINDER = 24
    OP_NOT = 25
    OP_AND = 26
    OP_OR = 27
    OP_EQUAL = 28
    OP_ASSIGN = 29
    OP_NOT_EQUAL = 30
    OP_SMALLER = 31
    OP_GREATER = 32
    OP_SMALLER_EQUAL = 33
    OP_GREATER_EQUAL = 34
    OP_STRING_EQUAL = 35
    OP_STRING_CONCAT = 36
    SEP_OPEN_PAREN = 37
    SEP_CLOSE_PAREN = 38
    SEP_OPEN_BRACK = 39
    SEP_CLOSE_BRACK = 40
    SEP_COMA = 41
    COMMENT = 42
    WS = 43
    NEW_LINE = 44
    IDENTIFIER = 45
    MAIN_TOKEN = 46
    NUMBER = 47
    STRING = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", 
            "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'=='", "'...'", "'('", "')'", "'['", "']'", "','", "'main'" ]

    symbolicNames = [ "<INVALID>",
            "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", "KW_STRING", 
            "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", "KW_FOR", "KW_UNTIL", 
            "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", 
            "KW_BEGIN", "KW_END", "OP_ADD", "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", 
            "OP_REMAINDER", "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", "OP_ASSIGN", 
            "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", 
            "OP_GREATER_EQUAL", "OP_STRING_EQUAL", "OP_STRING_CONCAT", "SEP_OPEN_PAREN", 
            "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", "SEP_CLOSE_BRACK", "SEP_COMA", 
            "COMMENT", "WS", "NEW_LINE", "IDENTIFIER", "MAIN_TOKEN", "NUMBER", 
            "STRING", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", "KW_STRING", 
                  "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", "KW_FOR", 
                  "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", 
                  "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", 
                  "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", 
                  "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", "OP_ASSIGN", 
                  "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", "OP_SMALLER_EQUAL", 
                  "OP_GREATER_EQUAL", "OP_STRING_EQUAL", "OP_STRING_CONCAT", 
                  "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
                  "SEP_CLOSE_BRACK", "SEP_COMA", "COMMENT_HEAD", "COMMENT", 
                  "WS", "NEW_LINE", "WINDOW_NEW_LINE", "NOT_NEW_LINE", "IDENTIFIER_HEAD", 
                  "IDENTIFIER_TAIL", "IDENTIFIER", "MAIN_TOKEN", "ZERO", 
                  "NON_ZERO_DIGIT", "DIGIT", "DECIMAL", "FLOATING_POINT", 
                  "EXPONENTIAL", "NUMBER", "ESCAPE_SIGN", "ESCAPE_SEQUENCE", 
                  "ESCAPE_REP", "NOT_ESCAPE_REP", "ILLEGAL_ESCAPE_SEQ", 
                  "STRING_CHAR", "DOUBLE_QUOTE_IN_STRING", "STRING_LITTERAL", 
                  "STRING", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[44] = self.NEW_LINE_action 
            actions[66] = self.STRING_action 
            actions[67] = self.ERROR_CHAR_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEW_LINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.replace("\r\n", "\n").replace("\r", "\n")
     

    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.text = self.text.replace("\n", "").replace("\r\n", "").replace("\r", "")
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise IllegalEscape(self.text[1:])
     


