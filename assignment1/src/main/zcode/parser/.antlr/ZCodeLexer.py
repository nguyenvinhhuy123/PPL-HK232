# Generated from c:/Users/nvhuy/Documents/GitHub/PPl-HK232/assignment1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#MSSV: 2152597


def serializedATN():
    return [
        4,0,52,456,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,5,44,319,8,44,10,44,12,44,322,9,44,
        1,45,4,45,325,8,45,11,45,12,45,326,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,3,48,337,8,48,1,49,1,49,5,49,341,8,49,10,49,12,49,344,
        9,49,1,50,1,50,5,50,348,8,50,10,50,12,50,351,9,50,1,50,3,50,354,
        8,50,1,51,1,51,3,51,358,8,51,1,51,1,51,5,51,362,8,51,10,51,12,51,
        365,9,51,1,51,3,51,368,8,51,1,52,1,52,1,52,1,52,1,52,3,52,375,8,
        52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,57,1,
        57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,3,60,399,8,60,1,
        61,1,61,5,61,403,8,61,10,61,12,61,406,9,61,1,61,1,61,1,61,1,62,1,
        62,1,62,1,63,1,63,5,63,416,8,63,10,63,12,63,419,9,63,1,63,1,63,1,
        64,4,64,424,8,64,11,64,12,64,425,1,64,1,64,1,65,1,65,1,66,1,66,1,
        67,1,67,1,67,1,68,1,68,5,68,439,8,68,10,68,12,68,442,9,68,1,68,1,
        68,1,68,1,69,1,69,5,69,449,8,69,10,69,12,69,452,9,69,1,69,1,69,1,
        69,0,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,
        0,91,44,93,0,95,0,97,0,99,0,101,0,103,0,105,45,107,0,109,0,111,0,
        113,0,115,0,117,0,119,0,121,0,123,46,125,0,127,47,129,48,131,49,
        133,0,135,50,137,51,139,52,1,0,12,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,45,
        5,0,8,10,12,13,34,34,39,39,92,92,1,0,92,92,7,0,8,8,34,34,39,39,102,
        102,110,110,114,114,116,116,1,0,39,39,1,0,34,34,3,0,8,9,12,13,32,
        32,1,0,10,10,454,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,91,1,0,0,0,
        0,105,1,0,0,0,0,123,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,
        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,
        149,1,0,0,0,5,154,1,0,0,0,7,159,1,0,0,0,9,165,1,0,0,0,11,172,1,0,
        0,0,13,177,1,0,0,0,15,184,1,0,0,0,17,191,1,0,0,0,19,195,1,0,0,0,
        21,203,1,0,0,0,23,208,1,0,0,0,25,212,1,0,0,0,27,218,1,0,0,0,29,221,
        1,0,0,0,31,227,1,0,0,0,33,236,1,0,0,0,35,239,1,0,0,0,37,244,1,0,
        0,0,39,249,1,0,0,0,41,255,1,0,0,0,43,259,1,0,0,0,45,261,1,0,0,0,
        47,263,1,0,0,0,49,265,1,0,0,0,51,267,1,0,0,0,53,269,1,0,0,0,55,273,
        1,0,0,0,57,277,1,0,0,0,59,280,1,0,0,0,61,282,1,0,0,0,63,285,1,0,
        0,0,65,288,1,0,0,0,67,290,1,0,0,0,69,292,1,0,0,0,71,295,1,0,0,0,
        73,298,1,0,0,0,75,301,1,0,0,0,77,305,1,0,0,0,79,307,1,0,0,0,81,309,
        1,0,0,0,83,311,1,0,0,0,85,313,1,0,0,0,87,315,1,0,0,0,89,320,1,0,
        0,0,91,324,1,0,0,0,93,330,1,0,0,0,95,332,1,0,0,0,97,336,1,0,0,0,
        99,338,1,0,0,0,101,353,1,0,0,0,103,367,1,0,0,0,105,374,1,0,0,0,107,
        376,1,0,0,0,109,378,1,0,0,0,111,381,1,0,0,0,113,385,1,0,0,0,115,
        387,1,0,0,0,117,389,1,0,0,0,119,392,1,0,0,0,121,398,1,0,0,0,123,
        400,1,0,0,0,125,410,1,0,0,0,127,413,1,0,0,0,129,423,1,0,0,0,131,
        429,1,0,0,0,133,431,1,0,0,0,135,433,1,0,0,0,137,436,1,0,0,0,139,
        446,1,0,0,0,141,142,5,110,0,0,142,143,5,111,0,0,143,144,5,116,0,
        0,144,145,5,32,0,0,145,146,5,121,0,0,146,147,5,101,0,0,147,148,5,
        116,0,0,148,2,1,0,0,0,149,150,5,109,0,0,150,151,5,97,0,0,151,152,
        5,105,0,0,152,153,5,110,0,0,153,4,1,0,0,0,154,155,5,116,0,0,155,
        156,5,114,0,0,156,157,5,117,0,0,157,158,5,101,0,0,158,6,1,0,0,0,
        159,160,5,102,0,0,160,161,5,97,0,0,161,162,5,108,0,0,162,163,5,115,
        0,0,163,164,5,101,0,0,164,8,1,0,0,0,165,166,5,110,0,0,166,167,5,
        117,0,0,167,168,5,109,0,0,168,169,5,98,0,0,169,170,5,101,0,0,170,
        171,5,114,0,0,171,10,1,0,0,0,172,173,5,98,0,0,173,174,5,111,0,0,
        174,175,5,111,0,0,175,176,5,108,0,0,176,12,1,0,0,0,177,178,5,115,
        0,0,178,179,5,116,0,0,179,180,5,114,0,0,180,181,5,105,0,0,181,182,
        5,110,0,0,182,183,5,103,0,0,183,14,1,0,0,0,184,185,5,114,0,0,185,
        186,5,101,0,0,186,187,5,116,0,0,187,188,5,117,0,0,188,189,5,114,
        0,0,189,190,5,110,0,0,190,16,1,0,0,0,191,192,5,118,0,0,192,193,5,
        97,0,0,193,194,5,114,0,0,194,18,1,0,0,0,195,196,5,100,0,0,196,197,
        5,121,0,0,197,198,5,110,0,0,198,199,5,97,0,0,199,200,5,109,0,0,200,
        201,5,105,0,0,201,202,5,99,0,0,202,20,1,0,0,0,203,204,5,102,0,0,
        204,205,5,117,0,0,205,206,5,110,0,0,206,207,5,99,0,0,207,22,1,0,
        0,0,208,209,5,102,0,0,209,210,5,111,0,0,210,211,5,114,0,0,211,24,
        1,0,0,0,212,213,5,117,0,0,213,214,5,110,0,0,214,215,5,116,0,0,215,
        216,5,105,0,0,216,217,5,108,0,0,217,26,1,0,0,0,218,219,5,98,0,0,
        219,220,5,121,0,0,220,28,1,0,0,0,221,222,5,98,0,0,222,223,5,114,
        0,0,223,224,5,101,0,0,224,225,5,97,0,0,225,226,5,107,0,0,226,30,
        1,0,0,0,227,228,5,99,0,0,228,229,5,111,0,0,229,230,5,110,0,0,230,
        231,5,116,0,0,231,232,5,105,0,0,232,233,5,110,0,0,233,234,5,117,
        0,0,234,235,5,101,0,0,235,32,1,0,0,0,236,237,5,105,0,0,237,238,5,
        102,0,0,238,34,1,0,0,0,239,240,5,101,0,0,240,241,5,108,0,0,241,242,
        5,115,0,0,242,243,5,101,0,0,243,36,1,0,0,0,244,245,5,101,0,0,245,
        246,5,108,0,0,246,247,5,105,0,0,247,248,5,102,0,0,248,38,1,0,0,0,
        249,250,5,98,0,0,250,251,5,101,0,0,251,252,5,103,0,0,252,253,5,105,
        0,0,253,254,5,110,0,0,254,40,1,0,0,0,255,256,5,101,0,0,256,257,5,
        110,0,0,257,258,5,100,0,0,258,42,1,0,0,0,259,260,5,43,0,0,260,44,
        1,0,0,0,261,262,5,45,0,0,262,46,1,0,0,0,263,264,5,42,0,0,264,48,
        1,0,0,0,265,266,5,47,0,0,266,50,1,0,0,0,267,268,5,37,0,0,268,52,
        1,0,0,0,269,270,5,110,0,0,270,271,5,111,0,0,271,272,5,116,0,0,272,
        54,1,0,0,0,273,274,5,97,0,0,274,275,5,110,0,0,275,276,5,100,0,0,
        276,56,1,0,0,0,277,278,5,111,0,0,278,279,5,114,0,0,279,58,1,0,0,
        0,280,281,5,61,0,0,281,60,1,0,0,0,282,283,5,60,0,0,283,284,5,45,
        0,0,284,62,1,0,0,0,285,286,5,33,0,0,286,287,5,61,0,0,287,64,1,0,
        0,0,288,289,5,60,0,0,289,66,1,0,0,0,290,291,5,62,0,0,291,68,1,0,
        0,0,292,293,5,60,0,0,293,294,5,61,0,0,294,70,1,0,0,0,295,296,5,62,
        0,0,296,297,5,61,0,0,297,72,1,0,0,0,298,299,5,61,0,0,299,300,5,61,
        0,0,300,74,1,0,0,0,301,302,5,46,0,0,302,303,5,46,0,0,303,304,5,46,
        0,0,304,76,1,0,0,0,305,306,5,40,0,0,306,78,1,0,0,0,307,308,5,41,
        0,0,308,80,1,0,0,0,309,310,5,91,0,0,310,82,1,0,0,0,311,312,5,93,
        0,0,312,84,1,0,0,0,313,314,5,44,0,0,314,86,1,0,0,0,315,316,7,0,0,
        0,316,88,1,0,0,0,317,319,7,1,0,0,318,317,1,0,0,0,319,322,1,0,0,0,
        320,318,1,0,0,0,320,321,1,0,0,0,321,90,1,0,0,0,322,320,1,0,0,0,323,
        325,3,87,43,0,324,323,1,0,0,0,325,326,1,0,0,0,326,324,1,0,0,0,326,
        327,1,0,0,0,327,328,1,0,0,0,328,329,3,89,44,0,329,92,1,0,0,0,330,
        331,5,48,0,0,331,94,1,0,0,0,332,333,7,2,0,0,333,96,1,0,0,0,334,337,
        3,93,46,0,335,337,3,95,47,0,336,334,1,0,0,0,336,335,1,0,0,0,337,
        98,1,0,0,0,338,342,3,95,47,0,339,341,3,97,48,0,340,339,1,0,0,0,341,
        344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,100,1,0,0,0,344,
        342,1,0,0,0,345,349,5,46,0,0,346,348,3,97,48,0,347,346,1,0,0,0,348,
        351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,354,1,0,0,0,351,
        349,1,0,0,0,352,354,1,0,0,0,353,345,1,0,0,0,353,352,1,0,0,0,354,
        102,1,0,0,0,355,357,7,3,0,0,356,358,7,4,0,0,357,356,1,0,0,0,357,
        358,1,0,0,0,358,359,1,0,0,0,359,363,3,95,47,0,360,362,3,97,48,0,
        361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,
        364,368,1,0,0,0,365,363,1,0,0,0,366,368,1,0,0,0,367,355,1,0,0,0,
        367,366,1,0,0,0,368,104,1,0,0,0,369,370,3,99,49,0,370,371,3,101,
        50,0,371,372,3,103,51,0,372,375,1,0,0,0,373,375,3,93,46,0,374,369,
        1,0,0,0,374,373,1,0,0,0,375,106,1,0,0,0,376,377,8,5,0,0,377,108,
        1,0,0,0,378,379,9,0,0,0,379,380,7,6,0,0,380,110,1,0,0,0,381,382,
        9,0,0,0,382,383,3,109,54,0,383,384,3,113,56,0,384,112,1,0,0,0,385,
        386,7,7,0,0,386,114,1,0,0,0,387,388,8,7,0,0,388,116,1,0,0,0,389,
        390,3,109,54,0,390,391,3,115,57,0,391,118,1,0,0,0,392,393,7,8,0,
        0,393,394,7,9,0,0,394,120,1,0,0,0,395,399,3,111,55,0,396,399,3,119,
        59,0,397,399,3,107,53,0,398,395,1,0,0,0,398,396,1,0,0,0,398,397,
        1,0,0,0,399,122,1,0,0,0,400,404,7,9,0,0,401,403,3,121,60,0,402,401,
        1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,
        1,0,0,0,406,404,1,0,0,0,407,408,7,9,0,0,408,409,6,61,0,0,409,124,
        1,0,0,0,410,411,5,35,0,0,411,412,5,35,0,0,412,126,1,0,0,0,413,417,
        3,125,62,0,414,416,3,133,66,0,415,414,1,0,0,0,416,419,1,0,0,0,417,
        415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,
        421,6,63,1,0,421,128,1,0,0,0,422,424,7,10,0,0,423,422,1,0,0,0,424,
        425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,
        428,6,64,1,0,428,130,1,0,0,0,429,430,5,10,0,0,430,132,1,0,0,0,431,
        432,8,11,0,0,432,134,1,0,0,0,433,434,9,0,0,0,434,435,6,67,2,0,435,
        136,1,0,0,0,436,440,7,9,0,0,437,439,3,121,60,0,438,437,1,0,0,0,439,
        442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,
        440,1,0,0,0,443,444,5,0,0,1,444,445,6,68,3,0,445,138,1,0,0,0,446,
        450,7,9,0,0,447,449,3,121,60,0,448,447,1,0,0,0,449,452,1,0,0,0,450,
        448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,
        454,3,117,58,0,454,455,6,69,4,0,455,140,1,0,0,0,17,0,320,326,336,
        342,349,353,357,363,367,374,398,404,417,425,440,450,5,1,61,0,6,0,
        0,1,67,1,1,68,2,1,69,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    MAIN_TOKEN = 2
    KW_TRUE = 3
    KW_FALSE = 4
    KW_NUMBER = 5
    KW_BOOL = 6
    KW_STRING = 7
    KW_RETURN = 8
    KW_VAR = 9
    KW_DYNAMIC = 10
    KW_FUNC = 11
    KW_FOR = 12
    KW_UNTIL = 13
    KW_BY = 14
    KW_BREAK = 15
    KW_CONTINUE = 16
    KW_IF = 17
    KW_ELSE = 18
    KW_ELIF = 19
    KW_BEGIN = 20
    KW_END = 21
    OP_ADD = 22
    OP_SUBTRACT = 23
    OP_MULTI = 24
    OP_DIVIDE = 25
    OP_REMAINDER = 26
    OP_NOT = 27
    OP_AND = 28
    OP_OR = 29
    OP_EQUAL = 30
    OP_ASSIGN = 31
    OP_NOT_EQUAL = 32
    OP_SMALLER = 33
    OP_GREATER = 34
    OP_SMALLER_EQUAL = 35
    OP_GREATER_EQUAL = 36
    OP_STRING_EQUAL = 37
    OP_STRING_CONCAT = 38
    SEP_OPEN_PAREN = 39
    SEP_CLOSE_PAREN = 40
    SEP_OPEN_BRACK = 41
    SEP_CLOSE_BRACK = 42
    SEP_COMA = 43
    IDENTIFIER = 44
    NUMBER = 45
    STRING = 46
    COMMENT = 47
    WS = 48
    NEW_LINE = 49
    ERROR_CHAR = 50
    UNCLOSE_STRING = 51
    ILLEGAL_ESCAPE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not yet'", "'main'", "'true'", "'false'", "'number'", "'bool'", 
            "'string'", "'return'", "'var'", "'dynamic'", "'func'", "'for'", 
            "'until'", "'by'", "'break'", "'continue'", "'if'", "'else'", 
            "'elif'", "'begin'", "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'not'", "'and'", "'or'", "'='", "'<-'", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'=='", "'...'", "'('", "')'", "'['", "']'", 
            "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", "KW_BOOL", 
            "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", "KW_FUNC", 
            "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", "KW_CONTINUE", "KW_IF", 
            "KW_ELSE", "KW_ELIF", "KW_BEGIN", "KW_END", "OP_ADD", "OP_SUBTRACT", 
            "OP_MULTI", "OP_DIVIDE", "OP_REMAINDER", "OP_NOT", "OP_AND", 
            "OP_OR", "OP_EQUAL", "OP_ASSIGN", "OP_NOT_EQUAL", "OP_SMALLER", 
            "OP_GREATER", "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", "OP_STRING_EQUAL", 
            "OP_STRING_CONCAT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", "SEP_OPEN_BRACK", 
            "SEP_CLOSE_BRACK", "SEP_COMA", "IDENTIFIER", "NUMBER", "STRING", 
            "COMMENT", "WS", "NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "MAIN_TOKEN", "KW_TRUE", "KW_FALSE", "KW_NUMBER", 
                  "KW_BOOL", "KW_STRING", "KW_RETURN", "KW_VAR", "KW_DYNAMIC", 
                  "KW_FUNC", "KW_FOR", "KW_UNTIL", "KW_BY", "KW_BREAK", 
                  "KW_CONTINUE", "KW_IF", "KW_ELSE", "KW_ELIF", "KW_BEGIN", 
                  "KW_END", "OP_ADD", "OP_SUBTRACT", "OP_MULTI", "OP_DIVIDE", 
                  "OP_REMAINDER", "OP_NOT", "OP_AND", "OP_OR", "OP_EQUAL", 
                  "OP_ASSIGN", "OP_NOT_EQUAL", "OP_SMALLER", "OP_GREATER", 
                  "OP_SMALLER_EQUAL", "OP_GREATER_EQUAL", "OP_STRING_EQUAL", 
                  "OP_STRING_CONCAT", "SEP_OPEN_PAREN", "SEP_CLOSE_PAREN", 
                  "SEP_OPEN_BRACK", "SEP_CLOSE_BRACK", "SEP_COMA", "IDENTIFIER_HEAD", 
                  "IDENTIFIER_TAIL", "IDENTIFIER", "ZERO", "NON_ZERO_DIGIT", 
                  "DIGIT", "DECIMAL", "FLOATING_POINT", "EXPONENTIAL", "NUMBER", 
                  "STRING_CHAR", "ESCAPE_SIGN", "ESCAPE_SEQUENCE", "ESCAPE_REP", 
                  "NOT_ESCAPE_REP", "ILLEGAL_ESCAPW_SEQ", "DOUBLE_QUOTE_IN_STRING", 
                  "STRING_LITTERAL", "STRING", "COMMENT_HEAD", "COMMENT", 
                  "WS", "NEW_LINE", "NOT_NEW_LINE", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[61] = self.STRING_action 
            actions[67] = self.ERROR_CHAR_action 
            actions[68] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise IllegalEscape(self.text[1:])
     


